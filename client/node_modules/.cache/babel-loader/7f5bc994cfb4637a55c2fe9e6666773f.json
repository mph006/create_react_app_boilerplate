{"ast":null,"code":"var _jsxFileName = \"/Users/mattherman/Documents/myResume/interviewPrep/react_boilerplate/my-app/client/src/components/MockDataTable.js\",\n    _s = $RefreshSig$();\n\nimport { useQuery } from \"react-query\";\nimport { getFakeData } from \"../api/api\";\nimport { Table } from 'antd';\nimport '../styles/MockDataTable.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst formatColumns = data => {\n  console.log(data);\n\n  if (!data) {\n    return [];\n  }\n\n  return Object.keys(data[0]).filter(d => d !== 'postId').map((d, i) => {\n    return {\n      title: d,\n      dataIndex: d,\n      key: i\n    };\n  });\n};\n\nconst MockDataTable = props => {\n  _s();\n\n  const {\n    numRecords\n  } = props;\n  const {\n    isLoading,\n    error,\n    data\n  } = useQuery([`helloWorld-${numRecords}`, {\n    params: {\n      numRecords\n    }\n  }], getFakeData, {\n    keepPreviousData: true,\n    enabled: true\n  });\n\n  let retElem = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading ...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 19\n  }, this);\n\n  if (error) {\n    retElem = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error Fetching Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 19\n    }, this);\n  } else if (!isLoading && data && data.length > 0) {\n    retElem = /*#__PURE__*/_jsxDEV(Table, {\n      columns: formatColumns(data),\n      dataSource: data,\n      size: \"small\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 19\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"MockDataTable\",\n    children: retElem\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MockDataTable, \"P7jBIA24rc00P7RvfXjpVl6dqRI=\", false, function () {\n  return [useQuery];\n});\n\n_c = MockDataTable;\nexport default MockDataTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"MockDataTable\");","map":{"version":3,"sources":["/Users/mattherman/Documents/myResume/interviewPrep/react_boilerplate/my-app/client/src/components/MockDataTable.js"],"names":["useQuery","getFakeData","Table","formatColumns","data","console","log","Object","keys","filter","d","map","i","title","dataIndex","key","MockDataTable","props","numRecords","isLoading","error","params","keepPreviousData","enabled","retElem","length"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,SAAQC,KAAR,QAAoB,MAApB;AACA,OAAO,6BAAP;;;AAEA,MAAMC,aAAa,GAAIC,IAAD,IAAU;AAC5BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AACA,MAAG,CAACA,IAAJ,EAAS;AAAC,WAAO,EAAP;AAAU;;AACpB,SAAOG,MAAM,CAACC,IAAP,CAAYJ,IAAI,CAAC,CAAD,CAAhB,EAAqBK,MAArB,CAA4BC,CAAC,IAAEA,CAAC,KAAG,QAAnC,EAA6CC,GAA7C,CAAiD,CAACD,CAAD,EAAGE,CAAH,KAAO;AAC3D,WAAO;AACHC,MAAAA,KAAK,EAAEH,CADJ;AAEHI,MAAAA,SAAS,EAAEJ,CAFR;AAGHK,MAAAA,GAAG,EAACH;AAHD,KAAP;AAKH,GANM,CAAP;AAOH,CAVD;;AAYA,MAAMI,aAAa,GAAIC,KAAD,IAAS;AAAA;;AAE3B,QAAM;AAAEC,IAAAA;AAAF,MAAiBD,KAAvB;AAEA,QAAM;AAAEE,IAAAA,SAAF;AAAaC,IAAAA,KAAb;AAAoBhB,IAAAA;AAApB,MAA6BJ,QAAQ,CACvC,CAAE,cAAakB,UAAW,EAA1B,EAA6B;AAACG,IAAAA,MAAM,EAAE;AAACH,MAAAA;AAAD;AAAT,GAA7B,CADuC,EAEvCjB,WAFuC,EAGvC;AAACqB,IAAAA,gBAAgB,EAAC,IAAlB;AAAwBC,IAAAA,OAAO,EAAC;AAAhC,GAHuC,CAA3C;;AAKA,MAAIC,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAd;;AAEA,MAAGJ,KAAH,EAAS;AACLI,IAAAA,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAV;AACH,GAFD,MAGK,IAAG,CAACL,SAAD,IAAcf,IAAd,IAAsBA,IAAI,CAACqB,MAAL,GAAc,CAAvC,EAAyC;AAC1CD,IAAAA,OAAO,gBAAG,QAAC,KAAD;AACN,MAAA,OAAO,EAAErB,aAAa,CAACC,IAAD,CADhB;AAEN,MAAA,UAAU,EAAEA,IAFN;AAGN,MAAA,IAAI,EAAC;AAHC;AAAA;AAAA;AAAA;AAAA,YAAV;AAKH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,cACKoB;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA3BD;;GAAMR,a;UAIiChB,Q;;;KAJjCgB,a;AA6BN,eAAeA,aAAf","sourcesContent":["import { useQuery } from \"react-query\";\nimport { getFakeData } from \"../api/api\";\nimport {Table} from 'antd'\nimport '../styles/MockDataTable.css';\n\nconst formatColumns = (data) => {\n    console.log(data)\n    if(!data){return []}\n    return Object.keys(data[0]).filter(d=>d!=='postId').map((d,i)=>{\n        return {\n            title: d,\n            dataIndex: d,\n            key:i\n        }\n    })\n}\n\nconst MockDataTable = (props)=>{\n\n    const { numRecords } = props\n\n    const { isLoading, error, data } = useQuery(\n        [`helloWorld-${numRecords}`, {params: {numRecords}}], \n        getFakeData, \n        {keepPreviousData:true, enabled:true});\n\n    let retElem = <div>Loading ...</div>\n\n    if(error){\n        retElem = <div>Error Fetching Data</div>\n    }\n    else if(!isLoading && data && data.length > 0){\n        retElem = <Table \n            columns={formatColumns(data)} \n            dataSource={data} \n            size=\"small\" \n            />\n    }\n\n    return (\n        <div className=\"MockDataTable\">\n            {retElem}\n        </div>\n    );\n}\n\nexport default MockDataTable\n"]},"metadata":{},"sourceType":"module"}